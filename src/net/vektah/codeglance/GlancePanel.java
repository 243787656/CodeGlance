/*
 * Copyright Â© 2013, Adam Scarr
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.vektah.codeglance;

import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.event.VisibleAreaEvent;
import com.intellij.openapi.editor.event.VisibleAreaListener;
import com.intellij.openapi.fileEditor.FileEditor;
import com.intellij.openapi.fileEditor.TextEditor;
import com.intellij.openapi.project.Project;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;

/**
 * This JPanel gets injected into editor windows and renders a image generated by GlanceFileRenderer
 */
public class GlancePanel extends JPanel implements VisibleAreaListener{
	private Editor editor;
	private GlanceFileRender render;
	private JPanel container;
	private Logger logger = Logger.getInstance(getClass());

	public GlancePanel(Project project, FileEditor fileEditor, JPanel container) {
		this.editor = ((TextEditor) fileEditor).getEditor();
		this.container = container;

		container.addComponentListener(new ComponentAdapter() {
			@Override public void componentResized(ComponentEvent componentEvent) {
				GlancePanel.this.setPreferredSize(new Dimension(GlancePanel.this.container.getWidth() / 10, 0));
				GlancePanel.this.revalidate();
				GlancePanel.this.repaint();
			}
		});

		editor.getScrollingModel().addVisibleAreaListener(this);

		this.setMinimumSize(new Dimension(50, 0));
		this.setSize(new Dimension(50, 0));
		setPreferredSize(new Dimension(200, 200));
		render = new GlanceFileRender(project, editor);
	}

	@Override
	public void paint(Graphics g) {
		g.setColor(editor.getColorsScheme().getDefaultBackground());
		g.fillRect(0, 0, getWidth(), getHeight());

		BufferedImage img = render.getImg();

		// Draw the image and scale it to stretch vertically.
		g.drawImage(img,                                                    // source image
				0, 0, img.getWidth(), editor.getDocument().getLineCount(),  // destination location
				0, 0, img.getWidth(), editor.getDocument().getLineCount(),  // source location
				null);                                                      // observer

		// Draw the editor visible area
		Rectangle visible = render.getRenderAreaInChars();
		g.setColor(Color.GRAY);

		int width = visible.x + visible.width - visible.x;
		int height = visible.y + visible.height - visible.y;
		g.drawRect(visible.x, visible.y, width, height);
	}

	@Override public void visibleAreaChanged(VisibleAreaEvent visibleAreaEvent) {
		setPreferredSize(new Dimension(GlancePanel.this.container.getWidth() / 10, 0));
		revalidate();
		repaint();
	}
}
