/*
 * Copyright Â© 2013, Adam Scarr
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.vektah.codeglance.render;

/**
 * Works out a weight for each character from 0-1, 1 being fairly opaque (lets say, like an M), 0 being totally transparent.
 */
public class CharacterWeight {

	// This list of character weights has been generated by CharacterWeight.py - see the source for details.
	private static float[] weights = new float[] {
		0.3043f,        // 033 = '!'
		0.2919f,        // 034 = '"'
		0.6290f,        // 035 = '#'
		0.7036f,        // 036 = '$'
		0.5703f,        // 037 = '%'
		0.6303f,        // 038 = '&'
		0.1964f,        // 039 = '''
		0.5701f,        // 040 = '('
		0.5677f,        // 041 = ')'
		0.3249f,        // 042 = '*'
		0.4000f,        // 043 = '+'
		0.1491f,        // 044 = ','
		0.0857f,        // 045 = '-'
		0.0889f,        // 046 = '.'
		0.5942f,        // 047 = '/'
		0.7403f,        // 048 = '0'
		0.5570f,        // 049 = '1'
		0.5073f,        // 050 = '2'
		0.5615f,        // 051 = '3'
		0.6292f,        // 052 = '4'
		0.5315f,        // 053 = '5'
		0.6353f,        // 054 = '6'
		0.4791f,        // 055 = '7'
		0.7690f,        // 056 = '8'
		0.6336f,        // 057 = '9'
		0.1777f,        // 058 = ':'
		0.2380f,        // 059 = ';'
		0.4779f,        // 060 = '<'
		0.2857f,        // 061 = '='
		0.5362f,        // 062 = '>'
		0.3287f,        // 063 = '?'
		0.7201f,        // 064 = '@'
		0.5862f,        // 065 = 'A'
		0.8101f,        // 066 = 'B'
		0.4815f,        // 067 = 'C'
		0.7519f,        // 068 = 'D'
		0.6286f,        // 069 = 'E'
		0.5143f,        // 070 = 'F'
		0.6468f,        // 071 = 'G'
		0.8286f,        // 072 = 'H'
		0.6286f,        // 073 = 'I'
		0.4899f,        // 074 = 'J'
		0.7538f,        // 075 = 'K'
		0.4857f,        // 076 = 'L'
		0.5333f,        // 077 = 'M'
		0.6976f,        // 078 = 'N'
		0.6880f,        // 079 = 'O'
		0.6845f,        // 080 = 'P'
		0.7841f,        // 081 = 'Q'
		0.7911f,        // 082 = 'R'
		0.5672f,        // 083 = 'S'
		0.5143f,        // 084 = 'T'
		0.7713f,        // 085 = 'U'
		0.4668f,        // 086 = 'V'
		0.5665f,        // 087 = 'W'
		0.6016f,        // 088 = 'X'
		0.5247f,        // 089 = 'Y'
		0.5327f,        // 090 = 'Z'
		0.6857f,        // 091 = '['
		0.5938f,        // 092 = '\'
		0.6857f,        // 093 = ']'
		0.2843f,        // 094 = '^'
		0.1714f,        // 095 = '_'
		0.0816f,        // 096 = '`'
		0.6095f,        // 097 = 'a'
		0.7787f,        // 098 = 'b'
		0.4022f,        // 099 = 'c'
		0.7832f,        // 100 = 'd'
		0.7007f,        // 101 = 'e'
		0.6025f,        // 102 = 'f'
		0.8185f,        // 103 = 'g'
		0.8013f,        // 104 = 'h'
		0.4636f,        // 105 = 'i'
		0.5842f,        // 106 = 'j'
		0.7157f,        // 107 = 'k'
		0.5435f,        // 108 = 'l'
		0.4923f,        // 109 = 'm'
		0.7038f,        // 110 = 'n'
		0.5792f,        // 111 = 'o'
		0.7792f,        // 112 = 'p'
		0.7806f,        // 113 = 'q'
		0.4120f,        // 114 = 'r'
		0.5379f,        // 115 = 's'
		0.6028f,        // 116 = 't'
		0.6768f,        // 117 = 'u'
		0.3980f,        // 118 = 'v'
		0.7416f,        // 119 = 'w'
		0.5355f,        // 120 = 'x'
		0.6430f,        // 121 = 'y'
		0.5247f,        // 122 = 'z'
		0.6524f,        // 123 = '{'
		0.5714f,        // 124 = '|'
		0.6020f,        // 125 = '}'
		0.1948f,        // 126 = '~'
	};

	public static float getWeight(char c) {
		// Whitespace and non printing characters are totally transparent.
		if(c <= 32) return 0;

		// Unicode chars... Yeah not going to list all of those out.
		if(c >= 127) return 0.4f;

		return weights[c - 33];
	}
}
