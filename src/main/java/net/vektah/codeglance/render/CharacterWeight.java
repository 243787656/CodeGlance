/*
 * Copyright Â© 2013, Adam Scarr
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.vektah.codeglance.render;

/**
 * Works out a weight for each character from 0-1, 1 being fairly opaque (lets say, like an M), 0 being totally transparent.
 */
public class CharacterWeight {

	// This list of character weights has been generated by CharacterWeight.py - see the source for details.
	private static float[] weights = new float[] {
			0.2816f,        // 033 = '!' (top)
			0.1779f,        // 033 = '!' (bottom)
			0.4865f,        // 034 = '"' (top)
			0.0000f,        // 034 = '"' (bottom)
			0.4769f,        // 035 = '#' (top)
			0.5714f,        // 035 = '#' (bottom)
			0.5066f,        // 036 = '$' (top)
			0.6160f,        // 036 = '$' (bottom)
			0.4510f,        // 037 = '%' (top)
			0.5423f,        // 037 = '%' (bottom)
			0.2971f,        // 038 = '&' (top)
			0.7204f,        // 038 = '&' (bottom)
			0.3274f,        // 039 = ''' (top)
			0.0000f,        // 039 = ''' (bottom)
			0.4275f,        // 040 = '(' (top)
			0.5134f,        // 040 = '(' (bottom)
			0.4273f,        // 041 = ')' (top)
			0.5089f,        // 041 = ')' (bottom)
			0.3643f,        // 042 = '*' (top)
			0.1042f,        // 042 = '*' (bottom)
			0.1905f,        // 043 = '+' (top)
			0.2286f,        // 043 = '+' (bottom)
			0.0000f,        // 044 = ',' (top)
			0.2983f,        // 044 = ',' (bottom)
			0.0000f,        // 045 = '-' (top)
			0.0000f,        // 045 = '-' (bottom)
			0.0000f,        // 046 = '.' (top)
			0.1777f,        // 046 = '.' (bottom)
			0.3961f,        // 047 = '/' (top)
			0.5943f,        // 047 = '/' (bottom)
			0.5221f,        // 048 = '0' (top)
			0.5831f,        // 048 = '0' (bottom)
			0.4045f,        // 049 = '1' (top)
			0.5143f,        // 049 = '1' (bottom)
			0.3419f,        // 050 = '2' (top)
			0.4724f,        // 050 = '2' (bottom)
			0.3830f,        // 051 = '3' (top)
			0.4715f,        // 051 = '3' (bottom)
			0.4157f,        // 052 = '4' (top)
			0.5712f,        // 052 = '4' (bottom)
			0.4060f,        // 053 = '5' (top)
			0.4421f,        // 053 = '5' (bottom)
			0.3501f,        // 054 = '6' (top)
			0.6080f,        // 054 = '6' (bottom)
			0.4228f,        // 055 = '7' (top)
			0.3399f,        // 055 = '7' (bottom)
			0.5798f,        // 056 = '8' (top)
			0.6481f,        // 056 = '8' (bottom)
			0.5005f,        // 057 = '9' (top)
			0.4235f,        // 057 = '9' (bottom)
			0.1481f,        // 058 = ':' (top)
			0.1777f,        // 058 = ':' (bottom)
			0.1481f,        // 059 = ';' (top)
			0.2983f,        // 059 = ';' (bottom)
			0.3989f,        // 060 = '<' (top)
			0.3509f,        // 060 = '<' (bottom)
			0.2381f,        // 061 = '=' (top)
			0.2857f,        // 061 = '=' (bottom)
			0.4476f,        // 062 = '>' (top)
			0.3942f,        // 062 = '>' (bottom)
			0.3414f,        // 063 = '?' (top)
			0.1766f,        // 063 = '?' (bottom)
			0.3910f,        // 064 = '@' (top)
			0.7926f,        // 064 = '@' (bottom)
			0.3343f,        // 065 = 'A' (top)
			0.6156f,        // 065 = 'A' (bottom)
			0.5707f,        // 066 = 'B' (top)
			0.6830f,        // 066 = 'B' (bottom)
			0.3498f,        // 067 = 'C' (top)
			0.4296f,        // 067 = 'C' (bottom)
			0.5326f,        // 068 = 'D' (top)
			0.6364f,        // 068 = 'D' (bottom)
			0.4286f,        // 069 = 'E' (top)
			0.5143f,        // 069 = 'E' (bottom)
			0.3810f,        // 070 = 'F' (top)
			0.3429f,        // 070 = 'F' (bottom)
			0.3488f,        // 071 = 'G' (top)
			0.6476f,        // 071 = 'G' (bottom)
			0.5714f,        // 072 = 'H' (top)
			0.6857f,        // 072 = 'H' (bottom)
			0.4762f,        // 073 = 'I' (top)
			0.5714f,        // 073 = 'I' (bottom)
			0.3810f,        // 074 = 'J' (top)
			0.4083f,        // 074 = 'J' (bottom)
			0.5376f,        // 075 = 'K' (top)
			0.6617f,        // 075 = 'K' (bottom)
			0.2857f,        // 076 = 'L' (top)
			0.5143f,        // 076 = 'L' (bottom)
			0.4928f,        // 077 = 'M' (top)
			0.3139f,        // 077 = 'M' (bottom)
			0.5173f,        // 078 = 'N' (top)
			0.5416f,        // 078 = 'N' (bottom)
			0.4781f,        // 079 = 'O' (top)
			0.5759f,        // 079 = 'O' (bottom)
			0.5619f,        // 080 = 'P' (top)
			0.4576f,        // 080 = 'P' (bottom)
			0.4775f,        // 081 = 'Q' (top)
			0.7689f,        // 081 = 'Q' (bottom)
			0.5716f,        // 082 = 'R' (top)
			0.6761f,        // 082 = 'R' (bottom)
			0.3826f,        // 083 = 'S' (top)
			0.4923f,        // 083 = 'S' (bottom)
			0.4762f,        // 084 = 'T' (top)
			0.3429f,        // 084 = 'T' (bottom)
			0.5714f,        // 085 = 'U' (top)
			0.6283f,        // 085 = 'U' (bottom)
			0.3707f,        // 086 = 'V' (top)
			0.3516f,        // 086 = 'V' (bottom)
			0.3128f,        // 087 = 'W' (top)
			0.5564f,        // 087 = 'W' (bottom)
			0.4452f,        // 088 = 'X' (top)
			0.5479f,        // 088 = 'X' (bottom)
			0.4495f,        // 089 = 'Y' (top)
			0.3460f,        // 089 = 'Y' (bottom)
			0.4129f,        // 090 = 'Z' (top)
			0.4715f,        // 090 = 'Z' (bottom)
			0.4762f,        // 091 = '[' (top)
			0.6857f,        // 091 = '[' (bottom)
			0.3959f,        // 092 = '\' (top)
			0.5941f,        // 092 = '\' (bottom)
			0.4762f,        // 093 = ']' (top)
			0.6857f,        // 093 = ']' (bottom)
			0.3647f,        // 094 = '^' (top)
			0.0000f,        // 094 = '^' (bottom)
			0.0000f,        // 095 = '_' (top)
			0.3429f,        // 095 = '_' (bottom)
			0.1359f,        // 096 = '`' (top)
			0.0000f,        // 096 = '`' (bottom)
			0.2439f,        // 097 = 'a' (top)
			0.6853f,        // 097 = 'a' (bottom)
			0.5729f,        // 098 = 'b' (top)
			0.6431f,        // 098 = 'b' (bottom)
			0.2607f,        // 099 = 'c' (top)
			0.3966f,        // 099 = 'c' (bottom)
			0.5729f,        // 100 = 'd' (top)
			0.6521f,        // 100 = 'd' (bottom)
			0.3935f,        // 101 = 'e' (top)
			0.6844f,        // 101 = 'e' (bottom)
			0.6232f,        // 102 = 'f' (top)
			0.3429f,        // 102 = 'f' (bottom)
			0.3488f,        // 103 = 'g' (top)
			0.9927f,        // 103 = 'g' (bottom)
			0.5744f,        // 104 = 'h' (top)
			0.6857f,        // 104 = 'h' (bottom)
			0.3399f,        // 105 = 'i' (top)
			0.4052f,        // 105 = 'i' (bottom)
			0.3399f,        // 106 = 'j' (top)
			0.6463f,        // 106 = 'j' (bottom)
			0.5328f,        // 107 = 'k' (top)
			0.6015f,        // 107 = 'k' (bottom)
			0.4762f,        // 108 = 'l' (top)
			0.4013f,        // 108 = 'l' (bottom)
			0.3447f,        // 109 = 'm' (top)
			0.4000f,        // 109 = 'm' (bottom)
			0.4062f,        // 110 = 'n' (top)
			0.6857f,        // 110 = 'n' (bottom)
			0.2965f,        // 111 = 'o' (top)
			0.5799f,        // 111 = 'o' (bottom)
			0.3511f,        // 112 = 'p' (top)
			0.9109f,        // 112 = 'p' (bottom)
			0.3500f,        // 113 = 'q' (top)
			0.9154f,        // 113 = 'q' (bottom)
			0.3057f,        // 114 = 'r' (top)
			0.3429f,        // 114 = 'r' (bottom)
			0.2893f,        // 115 = 's' (top)
			0.5450f,        // 115 = 's' (bottom)
			0.5238f,        // 116 = 't' (top)
			0.4627f,        // 116 = 't' (bottom)
			0.3810f,        // 117 = 'u' (top)
			0.6678f,        // 117 = 'u' (bottom)
			0.2458f,        // 118 = 'v' (top)
			0.3538f,        // 118 = 'v' (bottom)
			0.4218f,        // 119 = 'w' (top)
			0.6884f,        // 119 = 'w' (bottom)
			0.3266f,        // 120 = 'x' (top)
			0.5461f,        // 120 = 'x' (bottom)
			0.3613f,        // 121 = 'y' (top)
			0.6521f,        // 121 = 'y' (bottom)
			0.3417f,        // 122 = 'z' (top)
			0.5183f,        // 122 = 'z' (bottom)
			0.4424f,        // 123 = '{' (top)
			0.6649f,        // 123 = '{' (bottom)
			0.3810f,        // 124 = '|' (top)
			0.5714f,        // 124 = '|' (bottom)
			0.4006f,        // 125 = '}' (top)
			0.6136f,        // 125 = '}' (bottom)
			0.0000f,        // 126 = '~' (top)
			0.1950f,        // 126 = '~' (bottom)
	};


	public static float getTopWeight(char c) {
		// Whitespace and non printing characters are totally transparent.
		if(c <= 32) return 0;

		// Unicode chars... Yeah not going to list all of those out.
		if(c >= 127) return 0.4f;

		return weights[c * 2 - 66];
	}

	public static float getBottomWeight(char c) {
		// Whitespace and non printing characters are totally transparent.
		if(c <= 32) return 0;

		// Unicode chars... Yeah not going to list all of those out.
		if(c >= 127) return 0.4f;

		return weights[c * 2 - 65];
	}
}
